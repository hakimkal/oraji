#!/bin/bash
project="oraji"
version="4.0.2"
author="Md. Jahidul Hamid"
source="https://github.com/neurobin/$project"
bug_report="$source/issues"
version_info="
********************** $project **********************
Version    : $version
Author     : $author
Source     : $source
Bug report : $bug_report
"

[[ $1 == "-v" || $1 == "--version" ]] && { echo "$version_info";exit 0; }

shopt -s extglob

if [ $EUID -ne 0 ]; then
    echo "
    *********This script must be run with root privilege*********
    *******************Sorry! Abort!*****************************
    "
    exit 1
fi

####################################### Expand path function ######################################

expandPath() {
  local path
  local -a pathElements resultPathElements
  IFS=':' read -r -a pathElements <<<"$1"
  : "${pathElements[@]}"
  for path in "${pathElements[@]}"; do
    : "$path"
    case "$path" in
      "~+"/*)
        path="$PWD/${path#"~+/"}"
        ;;
      "~-"/*)
        path="$OLDPWD/${path#"~-/"}"
        ;;
      "~"/*)
        path="$HOME/${path#"~/"}"
        ;;
      "~"*)
        old="$path"
        username="${path%%/*}"
        username="${username#"~"}"
        if [ x"$username" = x ];then
            path="$HOME"
        else
            IFS=: read _ _ _ _ _ homedir _ < <(getent passwd "$username")
            if [[ $path = */* ]]; then
              path="${homedir}/${path#*/}"
            else
              path="$homedir"
            fi
            if [ x"$path" = x ]; then
                path="$old"
            fi
        fi
        ;;
    esac
    resultPathElements+=( "$path" )
  done
  local result
  printf -v result '%s:' "${resultPathElements[@]}"
  printf '%s\n' "${result%:}"
}
####################################### Expand path function ######################################

################# Path Managing functions #####################################
disableJavaPath(){
jpath="$1"
pat="$(echo "$jpath" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
sed -e "s/^[[:blank:]]*export[[:blank:]]*J2SDKDIR[=]$pat/# &/" \
    -e "s/^[[:blank:]]*export[[:blank:]]*J2REDIR[=]$pat/# &/" \
    -e  "s/^[[:blank:]]*export[[:blank:]]*PATH[=]\$PATH[:]$pat/# &/" \
    -e  "s/^[[:blank:]]*export[[:blank:]]*JAVA_HOME[=]$pat/# &/" \
    -e  "s/^[[:blank:]]*export[[:blank:]]*DERBY_HOME[=]$pat/# &/" \
    --in-place /etc/profile
}

enableJavaPath(){
jpath="$1"
pat="$(echo "$jpath" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
sed -e  "s/^[[:blank:]]*#[[:blank:]]*\(export[[:blank:]]*J2SDKDIR[=]$pat.*\)/\1/g" \
    -e  "s/^[[:blank:]]*#[[:blank:]]*\(export[[:blank:]]*J2REDIR[=]$pat.*\)/\1/g" \
    -e  "s/^[[:blank:]]*#[[:blank:]]*\(export[[:blank:]]*PATH[=]\$PATH[:]$pat.*\)/\1/g" \
    -e  "s/^[[:blank:]]*#[[:blank:]]*\(export[[:blank:]]*JAVA_HOME[=]$pat.*\)/\1/g" \
    -e  "s/^[[:blank:]]*#[[:blank:]]*\(export[[:blank:]]*DERBY_HOME[=]$pat.*\)/\1/g" \
    --in-place /etc/profile
}

deleteJavaPath(){
jpath="$1"
[[ ! $jpath =~ ^/usr/lib/jvm/j(dk|re).* ]] && { echo "E: argument to deletePath is invalid"; exit 1; }
pat="$(echo "$jpath" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
sed -e "/^[[:blank:]]*export[[:blank:]]*J2SDKDIR[=]$pat/d" \
    -e "/^[[:blank:]]*export[[:blank:]]*J2REDIR[=]$pat/d" \
    -e  "/^[[:blank:]]*export[[:blank:]]*PATH[=]\$PATH[:]$pat/d" \
    -e  "/^[[:blank:]]*export[[:blank:]]*JAVA_HOME[=]$pat/d" \
    -e  "/^[[:blank:]]*export[[:blank:]]*DERBY_HOME[=]$pat/d" \
    --in-place /etc/profile
}

disableOtherJavaPaths(){
sed -e "s/^[[:blank:]]*export[[:blank:]]*PATH[=]\$PATH[:][/]usr[/]lib[/]jvm[/]j\(dk\|re\)[[:digit:]_.]*/# &/g" \
    -e "s/^[[:blank:]]*export[[:blank:]]*J2SDKDIR[=][/]usr[/]lib[/]jvm[/]j\(dk\|re\)[[:digit:]_.]*/# &/g" \
    -e "s/^[[:blank:]]*export[[:blank:]]*J2REDIR[=][/]usr[/]lib[/]jvm[/]j\(dk\|re\)[[:digit:]_.]*/# &/g" \
    -e "s/^[[:blank:]]*export[[:blank:]]*JAVA_HOME[=][/]usr[/]lib[/]jvm[/]j\(dk\|re\)[[:digit:]_.]*/# &/g" \
    -e "s/^[[:blank:]]*export[[:blank:]]*DERBY_HOME[=][/]usr[/]lib[/]jvm[/]j\(dk\|re\)[[:digit:]_.]*/# &/g" \
    --in-place /etc/profile
}

installJavaPaths(){
    jname="$1"
    echo "
    ...updating JAVA_HOME and other environment variables..."
    # But first disable other Java environment variables
    disableOtherJavaPaths
    
    h1="export J2SDKDIR=/usr/lib/jvm/$jname"
    h2="export J2REDIR=/usr/lib/jvm/$jname/jre"
    if [[ $jname =~ ^jdk ]];then
        h3="export PATH=\$PATH:/usr/lib/jvm/$jname/bin:/usr/lib/jvm/$jname/db/bin:/usr/lib/jvm/$jname/jre/bin"
    else
        h3="export PATH=\$PATH:/usr/lib/jvm/$jname/bin"
    fi
    h4="export JAVA_HOME=/usr/lib/jvm/$jname"
    h5="export DERBY_HOME=/usr/lib/jvm/$jname/db"
    
    cpat="\([[:blank:]]*[#][[:blank:]]*\|[[:blank:]]*\)"
    
    pat1="$cpat$(echo "$h1" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
    pat2="$cpat$(echo "$h2" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
    pat3="$cpat$(echo "$h3" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
    pat4="$cpat$(echo "$h4" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
    pat5="$cpat$(echo "$h5" |sed 's/[^^]/[&]/g; s/\^/\\^/g')"
    
    if [[ $jname =~ ^jdk ]];then
    
        #Delete duplicate entry
        sed -e "/^$pat1/d" \
            -e "/^$pat2/d" \
            -e "/^$pat3/d" \
            -e "/^$pat4/d" \
            -e "/^$pat5/d" \
            --in-place /etc/profile
        #Add new entry
        sed -e "\$s#\$#\n$h1#" \
            -e "\$s#\$#\n$h2#" \
            -e "\$s#\$#\n$h3#" \
            -e "\$s#\$#\n$h4#" \
            -e "\$s#\$#\n$h5#" \
            --in-place /etc/profile
    else
        #Delete duplicate
        sed -e "/^$pat3/d" \
            -e "/^$pat4/d" \
            --in-place /etc/profile
        #Add new
        sed -e "\$s#\$#\n$h3#" \
        sed -e "\$s#\$#\n$h4#" \
            --in-place /etc/profile
    fi
    (( $? == 0 )) &&
    . /etc/profile >/dev/null &&
    echo "
    ***environment variables updated successfully***" ||
    echo "
    ---Failed to update environment variables"

}

################# Path Managing functions #####################################

####################################### Uninstall function ########################################
uninstall(){
    shopt -s extglob
    
    jname="$1"
    
    [[ $jname =~ ^(jdk|jre).* || ! -d /usr/lib/jvm/$jname ]] && { echo "
    ---Invalid java name/version.---"; exit 2; }
    
    [[ $jname == "" ]] && 
    {
    if update-alternatives --display java >/dev/null 2>&1;then
        jname="$(update-alternatives --display  java |grep -oE 'points\s*to\s*/usr/lib/jvm/[^/]*')"
        jname="${jname##*/}"
        read -e -i "$jname" -p "Enter the java version (with jdk/jre): " jname
    else
        read -e -i "$jname" -p "Enter the java version (with jdk/jre): " jname
    fi
    }
    
    [[ -d /usr/lib/jvm/"$jname" ]] || 
    { 
    printf "%s\n" "
    -----Directory not found: /usr/lib/jvm/$jname-----
    "; exit 3;
    }
    
    
    [[ $jname == "" || $jname =~ \/ ]] && echo "
    ------java name can not be empty or contain /------" && exit 4
    ##variable jname is safe to use now.
    
    patt="^(jdk|jre).*"
    [[ $jname =~ $patt ]] || { echo "
    ------Couldn't recognize java name/version------";exit 5; }
    jgenre="${BASH_REMATCH[1]}"   ## whether it's jdk or jre
    doing=false;
    for prog in /usr/lib/jvm/"$jname"/bin/*;do
        progn="${prog##*/}"
        [[ $progn == *"."* ]] && continue
        if [[ -f $prog ]];then
            update-alternatives --remove "$progn" "/usr/lib/jvm/$jname/bin/$progn"
            doing=true
        fi
    done
    
    ##This rm command is perfectly safe as we checked $jname to be non-empty
    rm -rf "/usr/lib/jvm/$jname" && echo "
    ***removed: /usr/lib/jvm/$jname***"
    
    ##Let's delete the environment variables for this java version
    deleteJavaPath "/usr/lib/jvm/$jname"
    
    (( $? == 0 )) &&
    source /etc/profile >/dev/null &&
    echo "
    ***Removed java environment variables***" ||
    echo "
    ---Failed to remove java environment variables"
    
    ##We will remove mozilla plugins for only the active java version.
    if $doing;then 
        rm ~/.mozilla/plugins/libnpjp2.so && echo "
    ***Mozilla plugin removed***" ||
        echo "
    ---Mozilla plugin not found (ignore this error)---" # optional
    fi
    
    echo "
    ...Checking if a fall-back Java is available..."
    ##try to restore mozilla plugin and other environment variables for fall-back java (if available)
    if update-alternatives --display java >/dev/null 2>&1;then
        echo "
    ***Congrats... Fall-Back java found***"
        if echo "$(java -version 2>&1)" |grep -qsi "64-Bit";then
            arch=amd64
        else 
            arch=i386  ## detect arch
        fi
        jname="$(update-alternatives --display  java |grep -oE 'points\s*to\s*/usr/lib/jvm/[^/]*')"
        jname="${jname##*/}"
        
        ## We got a valid jname. Let's restore environment variables for this java version
        enableJavaPath "/usr/lib/jvm/$jname"
        (( $? == 0 )) &&
        source /etc/profile >/dev/null &&
        echo "
    ***Environment variables restored for Fall-Back java***" ||
        echo "
    ---Couldn't restore environment variables for Fall-Back java---"
        
        [[ $jname =~ ^jdk ]] && ln -sf /usr/lib/jvm/$jname/jre/lib/$arch/libnpjp2.so ~/.mozilla/plugins/ ||
        {
        [[ $jname =~ ^jre ]] && ln -sf /usr/lib/jvm/$jname/lib/$arch/libnpjp2.so ~/.mozilla/plugins/
        } && echo "
    ***Mozilla plugin restored for fall back java version***" ||
        echo "
    ---Couldn't restore mozilla plugin. Restore it manually if needed.
    For jdk: ln -sf /usr/lib/jvm/jdk<version_number>/jre/lib/your_arch/libnpjp2.so ~/.mozilla/plugins/
    For jre: ln -sf /usr/lib/jvm/jre<version_number>/lib/your_arch/libnpjp2.so ~/.mozilla/plugins/"
    
        echo "
    Fall-Back java version info:
    "
    
        cd ~ && java -version
    else
        echo "
    ***No Fall-Back java found***"
    fi
    
    echo "
    ******Uninstall Finished******"
}
####################################### Uninstall function ########################################

[[ $1 == "-u" ]] && { uninstall "$2";exit 0; }

jpath="$1"

#mytty=$(tty)

[[ $jpath == "" ]] && read -e -p "Enter the java archive path: " jpath && jpath="$(expandPath "$jpath")"

##Validate jpath

[[ ! $jpath =~ .*(jdk|jre).*\.tar\..* ]] && { echo "Failed to recognize archive: $jpath";exit 2;}
[[ -d $jpath ]] && { echo "You must pass an archive file, not a directory";exit 2; }
[[ ! -f $jpath ]] && { echo "No such file: $jpath";exit 2;}

tmpdir="$(mktemp -d)"

tar -xvf "$jpath" -C "$tmpdir" || { echo "Failed to extract archive"; exit 2; }

cd "$tmpdir"/j* || { echo "Couldn't find java directory"; exit 3; }
jname="${PWD##*/}"
patt="^(jdk|jre).*"
[[ $jname =~ $patt ]]
jgenre="${BASH_REMATCH[1]}"   ## whether it's jdk or jre

[[ $jname != "" && $tmpdir != "" ]] || 
{ echo "
-----Variable jname/tmpdir can not be empty-----
Please file a bug report with all available terminal output and info at:
$bug_report
"; exit 4; }

mkdir -p /usr/lib/jvm/"$jname"
mv -f ./* -t /usr/lib/jvm/"$jname"

pr=22222  ## priority

if update-alternatives --display java >/dev/null 2>&1;then
    oldIFS="$IFS"
    IFS=$'\n' arr=($(update-alternatives --display java |grep -oE 'priority\s+[0-9]+' |grep -oE '[0-9]+' |sort -u))
    IFS="$oldIFS"
    ## Find an upper priority
    max=0
    for n in "${arr[@]}" ; do
        ((n > max)) && max=$n
    done
    
    ((pr<=max)) && pr=$((max+1))
fi

##Now install all available binaries with `update-alternatives --install` and set them to be used
for prog in /usr/lib/jvm/"$jname"/bin/*;do
    progn="${prog##*/}"
    [[ $progn == *"."* ]] && continue
    if [[ -f $prog ]];then
        update-alternatives --install "/usr/bin/$progn" "$progn" "/usr/lib/jvm/$jname/bin/$progn" $pr
        chmod a+x "/usr/bin/$progn"
        update-alternatives --set "$progn" "/usr/lib/jvm/$jname/bin/$progn"
    fi
done

chown -R root:root /usr/lib/jvm/"$jname"
[[ $tmpdir != "" ]] &&  rm -rf "$tmpdir"

# /etc/init.d/apparmor restart  # not needed

##Basic installation finished

cd ~ # needed to run java -version

if echo "$(java -version 2>&1)" |grep -qsi "64-Bit";then
    arch=amd64
else 
    arch=i386  ## detect arch
fi

jv="${jname/#jre/}"
jv="${jv/#jdk/}"  ##extracting java version from jname

if echo "$(java -version 2>&1)" |grep -qsi "java version.*$jv" ; then
    ##Install new paths
    installJavaPaths "$jname"

    echo "
    ...Managing mozilla plugin..."
    mkdir -p ~/.mozilla/plugins
    if [[ $jgenre == "jdk" ]];then
        ln -sf /usr/lib/jvm/"$jname"/jre/lib/"$arch"/libnpjp2.so ~/.mozilla/plugins/
    else
        ln -sf /usr/lib/jvm/"$jname"/lib/"$arch"/libnpjp2.so ~/.mozilla/plugins/
    fi
    (( $? == 0)) && echo "
    ***Managed mozilla plugin successfully***" ||
    echo "
    ---Failed to manage mozilla plugin. If you think it's necessary run 
    ln -sf /usr/lib/jvm/$jname/jre/lib/your-system-architecture-here/libnpjp2.so ~/.mozilla/plugins/  #For jdk and
    ln -sf /usr/lib/jvm/$jname/lib/your-system-architecture-here/libnpjp2.so ~/.mozilla/plugins/      #For jre
    manually, otherwise ignore."
    echo "
    *********************Installaion Finished*********************
    ***************Showing Java version information***************
    "
    java -version
    printf "%s\n" "
    *******************See if everything is OK********************
    (To populate environment variables immediately run 'source /etc/profile' manually)
    "
else
    echo "-----Failed to install java. Run 'java -version' manually to confirm.----"
fi

